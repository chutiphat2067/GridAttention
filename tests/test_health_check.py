#!/usr/bin/env python3
"""
Test Suite Health Check - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á test files
"""

import os
import sys
import importlib
import subprocess
from pathlib import Path


def check_test_environment():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    
    print("üîç GridAttention Test Suite Health Check")
    print("=" * 60)
    
    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python version
    print("\n1Ô∏è‚É£ Python Version:")
    python_version = sys.version.split()[0]
    if sys.version_info >= (3, 8):
        print(f"   ‚úÖ Python {python_version} (OK)")
    else:
        print(f"   ‚ùå Python {python_version} (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 3.8+)")
    
    # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö test dependencies
    print("\n2Ô∏è‚É£ Test Dependencies:")
    test_deps = {
        'pytest': 'pytest',
        'pytest-asyncio': 'pytest-asyncio',
        'pytest-cov': 'pytest-cov'
    }
    
    for name, package in test_deps.items():
        try:
            importlib.import_module(package.replace('-', '_'))
            print(f"   ‚úÖ {name}")
        except ImportError:
            print(f"   ‚ùå {name} - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢: pip install {package}")
    
    # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö test files
    print("\n3Ô∏è‚É£ Test Files:")
    test_dir = Path("tests")
    
    if not test_dir.exists():
        print(f"   ‚ùå Directory 'tests/' not found!")
        return False
    
    test_files = [
        'test_gridattention_complete.py',
        'test_warmup_integration.py', 
        'test_system_validation.py',
        'test_overfitting_detection.py',
        'test_phase_augmentation.py',
        'test_integration.py',
        'test_augmentation_monitoring.py',
        'final_test.py',
        'run_all_tests.py'
    ]
    
    found_files = 0
    for test_file in test_files:
        file_path = test_dir / test_file
        if file_path.exists():
            print(f"   ‚úÖ {test_file}")
            found_files += 1
        else:
            print(f"   ‚ùå {test_file} - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå")
    
    print(f"\n   ‡∏û‡∏ö {found_files}/{len(test_files)} test files")
    
    # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö main components ‡∏ó‡∏µ‡πà tests ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
    print("\n4Ô∏è‚É£ Required Components:")
    components_check = [
        ('core/attention_learning_layer.py', 'attention_learning_layer.py'),
        ('core/market_regime_detector.py', 'market_regime_detector.py'),
        ('core/grid_strategy_selector.py', 'grid_strategy_selector.py'),
        ('core/risk_management_system.py', 'risk_management_system.py'),
        ('core/execution_engine.py', 'execution_engine.py'),
        ('core/performance_monitor.py', 'performance_monitor.py'),
        ('core/feedback_loop.py', 'feedback_loop.py'),
        ('core/overfitting_detector.py', 'overfitting_detector.py')
    ]
    
    found_components = 0
    for new_path, old_path in components_check:
        if Path(new_path).exists():
            print(f"   ‚úÖ {new_path}")
            found_components += 1
        elif Path(old_path).exists():
            print(f"   ‚ö†Ô∏è  {old_path} - ‡πÉ‡∏ä‡πâ old structure")
            found_components += 1
        else:
            print(f"   ‚ùå {new_path} - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå")
    
    print(f"\n   ‡∏û‡∏ö {found_components}/{len(components_check)} components")
    
    # 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö config files
    print("\n5Ô∏è‚É£ Configuration Files:")
    config_files = [
        'config/config.yaml',
        'config/overfitting_config.yaml', 
        'config/config_production.yaml',
        'config/config_minimal.yaml'
    ]
    
    for config in config_files:
        if Path(config).exists():
            print(f"   ‚úÖ {config}")
        else:
            print(f"   ‚ö†Ô∏è  {config} - ‡πÑ‡∏°‡πà‡∏û‡∏ö (‡∏≠‡∏≤‡∏à‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)")
    
    # 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö main.py
    print("\n6Ô∏è‚É£ Main Entry Point:")
    if Path("main.py").exists():
        print("   ‚úÖ main.py - ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö import paths ‡πÉ‡∏ô main.py
        try:
            with open("main.py", 'r') as f:
                content = f.read()
                
            required_imports = [
                'OptimizedDashboardCollector',
                'patch_system_buffers',
                'unified_monitor'
            ]
            
            found_imports = 0
            for imp in required_imports:
                if imp in content:
                    found_imports += 1
            
            print(f"   ‚úÖ ‡∏û‡∏ö {found_imports}/{len(required_imports)} required imports")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö imports: {e}")
    else:
        print("   ‚ùå main.py - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå")
    
    # Summary
    print("\n" + "=" * 60)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
    
    issues = []
    
    if sys.version_info < (3, 8):
        issues.append("- ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î Python ‡πÄ‡∏õ‡πá‡∏ô 3.8+")
    
    if found_files < len(test_files):
        issues.append("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ test files ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    
    if found_components < len(components_check) * 0.8:
        issues.append("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ component files ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    
    if not issues:
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö!")
        print("\n‡∏£‡∏±‡∏ô tests ‡∏î‡πâ‡∏ß‡∏¢:")
        print("   python tests/run_all_tests.py")
        print("   python tests/run_all_tests.py --quick")
    else:
        print("‚ö†Ô∏è  ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
        for issue in issues:
            print(issue)
    
    return len(issues) == 0


def suggest_fixes():
    """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö"""
    
    print("\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
    print("-" * 60)
    
    print("\n1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á test dependencies:")
    print("   pip install pytest pytest-asyncio pytest-cov")
    
    print("\n2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö import paths:")
    print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å root directory ‡∏Ç‡∏≠‡∏á project")
    print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö __init__.py ‡πÉ‡∏ô tests/")
    
    print("\n3. ‡∏£‡∏±‡∏ô test ‡πÅ‡∏ö‡∏ö verbose ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π error:")
    print("   python tests/run_all_tests.py --stop-on-failure")
    
    print("\n4. ‡∏£‡∏±‡∏ô health check ‡∏≠‡∏∑‡πà‡∏ô‡πÜ:")
    print("   ./scripts/health_check.sh")
    print("   python scripts/quick_verify.py")


if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Test Suite...\n")
    
    success = check_test_environment()
    
    if not success:
        suggest_fixes()
    
    print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    sys.exit(0 if success else 1)